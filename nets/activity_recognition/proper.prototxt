# This network is used for activity recognition on the UCF-101 dataset.
# It is based on the network by Jeff Donahue in [1], and the lrcn.prototxt in his github branch.
# We adapted it for the action recognition use case.
#
# [1] J. Donahue, L. A. Hendricks, S. Guadarrama, M. Rohrbach, S. Venugopalan,
#     K. Saenko, T. Darrell. "Long-term Recurrent Convolutional Networks for
#     Visual Recognition and Description." arXiv preprint arXiv:1411.4389 (2014).

name: "activity_recognition_caffenet"
input: "data"
input_dim: 64
input_dim: 3
input_dim: 227
input_dim: 227

layer {
  name: "sequence"
  type: "DummyData"
  top: "sequence"
  dummy_data_param {
    shape {
      dim: 16
      dim: 4
    }
    data_filler {
      type: "sequence"
      value: 16
    }
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "reshape-fc6"
  type: "Reshape"
  top: "reshape-fc6"
  bottom: "fc6"
  reshape_param {
    shape {
      dim: 16
      dim: 4
      dim: 4096
    }
  }
}
layer {
  name: "lstm"
  type: "LSTM"
  bottom: "reshape-fc6"
  bottom: "sequence"
  top: "lstm"
  recurrent_param {
    num_output: 256
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "prediction"
  type: "InnerProduct"
  bottom: "lstm"
  top: "prediction"
  inner_product_param {
    num_output: 101
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "reshape-prediction"
  type: "Reshape"
  top: "reshape-prediction"
  bottom: "prediction"
  reshape_param {
    shape {
      dim: 64
      dim: 101
    }
  }
}
layer {
  name: "loss"
  type: "Softmax"
  bottom: "reshape-prediction"
  top: "loss"
}
layer {
  name:"argmax"
  type: "ArgMax"
  bottom: "loss"
  top: "argmax"
  argmax_param {
    top_k: 1
  }
}
